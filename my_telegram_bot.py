from telebot import types
import telebot

from typing import Final
import requests


TOKEN: Final = '6109688099:AAGJZuj0kVPEdjTZgaO27O5ZF-ey2WfFMis'
BOT_USERNAME: Final = '@local_recommendation_bot'


bot = telebot.TeleBot(token=TOKEN)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    bot.send_message(message.from_user.id,
                     "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç c –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏!",
                     reply_markup=markup)


@bot.message_handler(commands=['add_geo'])
def add_geo(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                                request_location=True)
    btn2 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id,
                     "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–¥–∞–π –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                     reply_markup=markup)


@bot.message_handler(content_types=["location"])
def handle_location(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.location is not None:
        PARAMS = {
            "apikey": "4e6e6cda-7f5c-417b-a6d0-90a5b6445055",
            "format": "json",
            "lang": "ru_RU",
            "kind": "house",
            "geocode": "%s, %s" % (message.location.longitude,
                                   message.location.latitude),
        }

        try:
            r = requests.get(url="https://geocode-maps.yandex.ru/1.x/",
                             params=PARAMS)
            json_data = r.json()
            address_str = json_data["response"]["GeoObjectCollection"][
                "featureMember"][0]["GeoObject"]["metaDataProperty"][
                "GeocoderMetaData"
            ]["AddressDetails"]["Country"]["AddressLine"]
            bot.send_message(message.from_user.id,
                             address_str,
                             reply_markup=markup)

        except Exception:
            mess = """–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.\n\
            –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–¥–æ–ª–≥–æ—Ç–∞, —à–∏—Ä–æ—Ç–∞):"""
            bot.send_message(message.from_user.id,
                             mess,
                             reply_markup=markup)
    else:
        bot.send_message(message.from_user.id,
                         '–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ—é –ª–æ–∫–∞—Ü–∏—é :(',
                         reply_markup=markup)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if1 = 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è'
    if2 = '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥'
    if (message.text == if1) | (message.text == if2):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?')
        btn2 = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π')
        btn3 = types.KeyboardButton('–ù–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π')
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.from_user.id,
                         '‚ùì –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                         reply_markup=markup)

    elif message.text == '–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?':
        mess = """–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /add_geo,
        —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ"""
        bot.send_message(message.from_user.id,
                         mess,
                         parse_mode='MarkdownV2')

    elif message.text == '–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π':
        bot.send_message(message.from_user.id,
                         '–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.',
                         parse_mode='Markdown')

    elif message.text == '–ù–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π':
        mess = '–î–µ—Ç–∞–ª–∏ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ '
        link = '[—Å—Å—ã–ª–∫–µ](https://github.com/hgfs113/local-recommendation-bot)'
        bot.send_message(message.from_user.id,
                         mess + link,
                         parse_mode='Markdown')

    else:
        bot.send_message(message.from_user.id, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ—é –∫–æ–º–∞–Ω–¥—É :(',
                         parse_mode='Markdown')


bot.polling(none_stop=True, interval=0)
