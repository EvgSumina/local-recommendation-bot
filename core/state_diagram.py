from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from core import utils
from collections import defaultdict
import gettext


_ = gettext.translation(
    domain="messages",
    localedir="locale",
    languages=["en"],
).gettext


BC_HOW = '–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º? ü§ì'
BC_START = '–°–¢–ê–†–¢ üöÄ'
BC_CLEAR = '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é ü§ê'
BC_REPO = '–ù–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π üëª'


RECNAME_FOOD = _('–†–µ—Å—Ç–æ—Ä–∞–Ω—ã üç≥')
RECNAME_SHOP = _('–ú–∞–≥–∞–∑–∏–Ω—ã üõí')
RECNAME_PARK = _('–ü–∞—Ä–∫–∏ üå≤')
RECNAME_THEATER = _('–¢–µ–∞—Ç—Ä—ã üé≠')
RECNAME_MUSEUM = _('–ú—É–∑–µ–∏ üñºÔ∏è')
# RECNAME_ALL = _('–í—Å—ë üéà')
RECNAME_TO_ITEM_TYPE = {
    RECNAME_FOOD: utils.ItemType.FOOD,
    RECNAME_SHOP: utils.ItemType.SHOP
}


USER_INFO_AGGREGATOR = defaultdict(dict)
REC_HIST = defaultdict(dict)


class StateDiagram:
    def __init__(self, bot, feedback_event_processor,
                 food_recomender, shop_recomender):
        self.feedback_event_processor = feedback_event_processor
        self.bot = bot
        self.food_recomender = food_recomender
        self.shop_recomender = shop_recomender
        self.state = None
        self.markup = None
        self.bc = [
            BC_HOW,
            BC_START,
            BC_CLEAR,
            BC_REPO
        ]
        self.recom_types = [RECNAME_FOOD,
                            RECNAME_SHOP,
                            RECNAME_PARK,
                            RECNAME_THEATER,
                            RECNAME_MUSEUM]
        self.init_markups()

    def init_markups(self):
        self.base_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        self.base_markup.add(*(types.KeyboardButton(cmd) for cmd in self.bc))

        self.check_rec_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_var = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã ü§î')
        btn_back = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üõ¨')
        self.check_rec_markup.add(btn_var, btn_back)

        self.rec_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        self.rec_markup.add(*(
            types.KeyboardButton(rec_type) for rec_type in self.recom_types
        ))
        self.rec_markup.add(btn_back)

        self.loc_mark = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_address = types.KeyboardButton(text='–£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å üó∫Ô∏è')
        btn_dest = types.KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üåé',
                                        request_location=True)
        self.loc_mark.add(btn_address, btn_dest, btn_back)

        self.start_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn = types.KeyboardButton('üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è')
        self.start_markup.add(btn)

        self.reply_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton(text='–î–∞ ‚úîÔ∏è')
        btn2 = types.KeyboardButton(text='–ù–µ—Ç ‚ùå')
        self.reply_markup.add(btn1, btn2)

    def bot_answer(self, message):
        if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
            self.start_interface(message)

        elif message.text == BC_HOW:
            self.usual_message(message, "how_use")

        elif message.text == BC_REPO:
            self.usual_message(message, "link")

        elif message.text == BC_CLEAR:
            self.clear_history(message)

        elif message.text in [BC_START, '/add_geo']:
            self.initialize_user(message)

        elif message.text in ['–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üõ¨', '/back']:
            self.backward_go(message)

        elif message.text in ['–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üåé',
                              '–£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å üó∫Ô∏è', '–î–∞ ‚úîÔ∏è']:
            self.main(message)

        elif message.text == '–ù–µ—Ç ‚ùå':
            self.initialize_user(message)

        elif message.text.startswith('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ'):
            print('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ... TODO')

        elif message.text in self.recom_types:
            self.select_recommendation(message)

        elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã ü§î':
            self.show_recommendation(message)

        else:
            self.read_address(message)

    def backward_go(self, message):
        USER_INFO = USER_INFO_AGGREGATOR[message.from_user.id]
        if "state" not in USER_INFO:
            USER_INFO["state"] = "START_INTERFACE"
            mess = "–≠—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
            self.bot.send_message(message.from_user.id,
                                  mess,
                                  reply_markup=self.base_markup)
        elif USER_INFO["state"] == "START_INTERFACE":
            mess = "–≠—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
            self.bot.send_message(message.from_user.id,
                                  mess,
                                  reply_markup=self.base_markup)
        elif USER_INFO["state"] in ["INITIALIZE_USER", "RECOMMENDATION"]:
            USER_INFO["state"] = "START_INTERFACE"
            self.bot.send_message(message.from_user.id,
                                  '‚ùì –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                                  reply_markup=self.base_markup)
        elif USER_INFO["state"] == "MAIN":
            USER_INFO["state"] = "INITIALIZE_USER"
            mess = '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–¥–∞–π –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
            self.bot.send_message(message.from_user.id,
                                  mess,
                                  reply_markup=self.loc_mark)
        elif USER_INFO["state"] == "SHOW_RECOMMENDATION":
            USER_INFO["state"] = "RECOMMENDATION"
            mess = '–í—ã–±–µ—Ä–∏, –∫–∞–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å'
            self.bot.send_message(message.from_user.id,
                                  mess,
                                  reply_markup=self.rec_markup,
                                  parse_mode='Markdown')

    def start_interface(self, message):
        USER_INFO = USER_INFO_AGGREGATOR[message.from_user.id]
        USER_INFO["state"] = "START_INTERFACE"
        self.bot.send_message(message.from_user.id,
                              '‚ùì –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                              reply_markup=self.base_markup)

    def clear_history(self, message):
        USER_INFO = USER_INFO_AGGREGATOR[message.from_user.id]
        if "state" in USER_INFO:
            if "user_id" in USER_INFO:
                self.feedback_event_processor.clear_user_history(
                    USER_INFO["user_id"])
            else:
                print('WARNING: user id not in USER_INFO')
        else:
            print('WARNING: state not in USER_INFO')
        self.bot.send_message(message.from_user.id,
                              '–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞ üòà',
                              parse_mode='Markdown')

    def usual_message(self, message, what_message):
        if what_message == "how_use":
            how_to_msg = r'–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /add\_geo, ' \
                r'—á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ\. ' \
                r'–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /back, ' \
                r'—á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É –Ω–∞–∑–∞–¥\. ' \
                r'–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /clear_history, ' \
                r'—á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\.'
            self.bot.send_message(message.from_user.id,
                                  how_to_msg,
                                  parse_mode='MarkdownV2')
        elif what_message == "link":
            mess = '–î–µ—Ç–∞–ª–∏ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ '
            m = '[—Å—Å—ã–ª–∫–µ]'
            link = '(https://github.com/hgfs113/local-recommendation-bot)'
            self.bot.send_message(message.from_user.id,
                                  mess + m + link,
                                  parse_mode='Markdown')

    def initialize_user(self, message):
        USER_INFO = USER_INFO_AGGREGATOR[message.from_user.id]
        GOOD_VARIANTS = ["START_INTERFACE", "MAIN",
                         "INITIALIZE_USER"]
        if "state" not in USER_INFO:
            USER_INFO["state"] = "START_INTERFACE"
            mess = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π, \
            –ø–æ–∫–∞ –Ω–µ –Ω–∞–∂–º–µ—Ç–µ '—Å—Ç–∞—Ä—Ç'"
            self.bot.send_message(message.from_user.id,
                                  mess,
                                  reply_markup=self.base_markup)
        elif USER_INFO["state"] in GOOD_VARIANTS:
            mess = '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–¥–∞–π –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
            USER_INFO["state"] = "INITIALIZE_USER"
            self.bot.send_message(message.from_user.id,
                                  mess,
                                  reply_markup=self.loc_mark)
        else:
            mess = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π, \
            –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å."
            self.bot.send_message(message.from_user.id,
                                  mess,
                                  reply_markup=self.select_markup(message))

    def select_markup(self, message):
        USER_INFO = USER_INFO_AGGREGATOR[message.from_user.id]
        if "state" not in USER_INFO:
            return self.start_markup
        elif USER_INFO["state"] == "START_INTERFACE":
            return self.base_markup
        elif USER_INFO["state"] == "INITIALIZE_USER":
            return self.loc_mark

    def main(self, message):
        USER_INFO = USER_INFO_AGGREGATOR[message.from_user.id]
        if "state" not in USER_INFO:
            mess = "–°—Ç—Ä–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"
            self.bot.send_message(message.from_user.id,
                                  mess,
                                  reply_markup=self.select_markup(message))
        elif USER_INFO["state"] == "INITIALIZE_USER":
            if message.text in ["–î–∞ ‚úîÔ∏è", '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üåé']:
                USER_INFO["state"] = "RECOMMENDATION"
                mess = '–í—ã–±–µ—Ä–∏, –∫–∞–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å'
                self.bot.send_message(message.from_user.id,
                                      mess,
                                      reply_markup=self.rec_markup,
                                      parse_mode='Markdown')
            elif message.text == '–£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å üó∫Ô∏è':
                USER_INFO["state"] = "INITIALIZE_USER"
                mess = '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ x.x, x.x (–¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)'
                ' –∏–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–æ—Ä–æ–¥, –£–ª–∏—Ü–∞, –ù–æ–º–µ—Ä –¥–æ–º–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)'
                self.bot.send_message(message.from_user.id,
                                      mess,
                                      parse_mode='Markdown')
        else:
            mess = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π, \
            –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å."
            self.bot.send_message(message.from_user.id,
                                  mess,
                                  reply_markup=self.select_markup(message))

    def read_address(self, message, flag_mess=False):
        USER_INFO = USER_INFO_AGGREGATOR[message.from_user.id]
        if "state" not in USER_INFO:
            mess = "–°—Ç—Ä–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"
            self.bot.send_message(message.from_user.id,
                                  mess,
                                  reply_markup=self.select_markup(message))
        elif USER_INFO["state"] in ["RECOMMENDATION", "INITIALIZE_USER"]:
            if flag_mess:
                if message.location is not None:
                    lon = message.location.longitude
                    lat = message.location.latitude
                    USER_INFO['lon'] = lon
                    USER_INFO['lat'] = lat

                    flag, mess = utils.get_address_from_coords((lon, lat))

                    if flag:
                        self.bot.send_message(message.from_user.id,
                                              '–¢–≤–æ–π –∞–¥—Ä–µ—Å:' + mess + '?',
                                              reply_markup=self.reply_markup)
                    else:
                        self.bot.send_message(
                            message.from_user.id,
                            mess,
                            reply_markup=self.loc_mark)
                else:
                    self.bot.send_message(message.from_user.id,
                                          '–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üòø',
                                          reply_markup=self.loc_mark)
            else:
                try:
                    address = message.text.split(',')
                    address = list(map(lambda x: x.strip(), address))
                    if len(address) == 2:

                        flag, mess = utils.get_address_from_coords(address)
                        print('else:', flag, mess)

                        if flag:
                            self.bot.send_message(
                                message.from_user.id,
                                '–¢–≤–æ–π –∞–¥—Ä–µ—Å:' + mess + '?',
                                reply_markup=self.reply_markup)
                        else:
                            self.bot.send_message(message.from_user.id,
                                                  mess,
                                                  reply_markup=self.loc_mark)
                except Exception:
                    self.bot.send_message(message.from_user.id,
                                          '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ—é –∫–æ–º–∞–Ω–¥—É :(',
                                          parse_mode='Markdown')
        else:
            mess = "–°—Ç—Ä–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"
            self.bot.send_message(message.from_user.id,
                                  mess,
                                  reply_markup=self.select_markup(message))

    def select_recommendation(self, message):
        USER_INFO = USER_INFO_AGGREGATOR[message.from_user.id]
        if "state" not in USER_INFO:
            mess = "–°—Ç—Ä–∞–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"
            self.bot.send_message(message.from_user.id,
                                  mess,
                                  reply_markup=self.select_markup(message))
        elif USER_INFO["state"] == "RECOMMENDATION":
            if message.text not in RECNAME_TO_ITEM_TYPE:
                self.bot.send_message(message.from_user.id,
                                      '–≠—Ç–æ—Ç —Ç–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –µ—â—ë –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                                      reply_markup=self.rec_markup,
                                      parse_mode='Markdown')
            else:
                USER_INFO["state"] = "SHOW_RECOMMENDATION"
                self.bot.send_message(message.from_user.id,
                                      '–í—ã –≤—ã–±—Ä–∞–ª–∏ ' + message.text.lower(),
                                      reply_markup=self.check_rec_markup,
                                      parse_mode='Markdown')
                m_text = message.text
                USER_INFO['recommender_type'] = RECNAME_TO_ITEM_TYPE[m_text]
        else:
            mess = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π, \
            –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å"
            self.bot.send_message(message.from_user.id,
                                  mess,
                                  reply_markup=self.select_markup(message))

    def show_recommendation(self, message):
        USER_INFO = USER_INFO_AGGREGATOR[message.from_user.id]
        USER_INFO['user_id'] = message.from_user.id
        if 'lon' not in USER_INFO or 'lat' not in USER_INFO:
            self.bot.send_message(message.from_user.id,
                                  '–Ø –Ω–µ –∑–Ω–∞—é, –≥–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è',
                                  parse_mode='Markdown',
                                  reply_markup=self.location_markup)
        else:
            if 'recommender_type' not in USER_INFO:
                self.bot.send_message(message.from_user.id,
                                      '–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
                                      parse_mode='Markdown',
                                      reply_markup=self.rec_markup)
            elif USER_INFO['recommender_type'] == utils.ItemType.FOOD:
                recommender = self.food_recomender
            elif USER_INFO['recommender_type'] == utils.ItemType.SHOP:
                recommender = self.shop_recomender
            else:
                self.bot.send_message(message.from_user.id,
                                      '–≠—Ç–æ—Ç —Ç–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –µ—â—ë –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω',
                                      parse_mode='Markdown')

            if recommender is not None:
                recommended_items = recommender.recommend(
                    USER_INFO,
                    user_history_limit=20,
                    light_recommender_limit=400,
                    heavy_recommender_limit=15,
                    blender_limit=5)
                self.write_recommendations(recommended_items, message)

    def gen_markup(self):
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(InlineKeyboardButton("üëç", callback_data="react_yes"),
                   InlineKeyboardButton("üëé", callback_data="react_no"))
        return markup

    def write_recommendations(self, recommended_items, message):
        for i, place in enumerate(recommended_items):
            d = utils.dist_to_str(place.dist)
            msg_sent = self.bot.send_message(
                    message.from_user.id,
                    f'#{i+1}: **{place.name}**\n'
                    f'- –∞–¥—Ä–µ—Å: {place.address}\n'
                    f'- —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –í–∞—Å: {d}\n'
                    f'- —Ä–µ–π—Ç–∏–Ω–≥: {place.get_rating() or "–ù–µ —É–∫–∞–∑–∞–Ω"}',
                    parse_mode='Markdown', reply_markup=self.gen_markup()
                )
            REC_HIST[message.from_user.id][msg_sent.message_id] = place.item_id

        self.bot.send_message(message.from_user.id,
                              '–ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã? üòé',
                              parse_mode='Markdown')
