from telebot import TeleBot, types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from core import recommender, utils


TOKEN = '6109688099:AAGJZuj0kVPEdjTZgaO27O5ZF-ey2WfFMis'
BOT_USERNAME = '@local_recommendation_bot'
USER_DICT = dict()
food_recomender = recommender.FoodRecommender()


bot = TeleBot(token=TOKEN)


def gen_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton("üëç", callback_data="cb_yes"),
               InlineKeyboardButton("üëé", callback_data="cb_no"))
    return markup

# @bot.callback_query_handler(func=lambda call: True)
# def callback_query(call):
#     if call.data == "cb_yes":
#         bot.answer_callback_query(call.id, "Answer is Yes")
#     elif call.data == "cb_no":
#         bot.answer_callback_query(call.id, "Answer is No")


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton('üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è')
    markup.add(btn)
    bot.send_message(message.from_user.id,
                     'üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç c –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏!',
                     reply_markup=markup)


@bot.message_handler(commands=['add_geo'])
def add_geo(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üåé',
                                request_location=True)
    btn2 = types.KeyboardButton(text='–£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å üó∫Ô∏è')
    btn3 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚ôæÔ∏è')
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.from_user.id,
                     '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–¥–∞–π –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                     reply_markup=markup)


@bot.message_handler(content_types=['location'])
def handle_location(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.location is not None:
        btn1 = types.KeyboardButton(text='–î–∞ ‚úîÔ∏è')
        btn2 = types.KeyboardButton(text='–ù–µ—Ç ‚ùå')
        markup.add(btn1, btn2)

        lon, lat = message.location.longitude, message.location.latitude
        USER_DICT['lon'] = lon
        USER_DICT['lat'] = lat

        flag, mess = utils.get_address_from_coords((lon, lat))

        if flag:
            bot.send_message(message.from_user.id,
                             '–¢–≤–æ–π –∞–¥—Ä–µ—Å:' + mess + '?',
                             reply_markup=markup)
        else:
            bot.send_message(message.from_user.id,
                             mess,
                             reply_markup=markup)

    else:
        bot.send_message(message.from_user.id,
                         '–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üòø',
                         reply_markup=markup)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    start_actions = ['üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è', '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚ôæÔ∏è']

    base_commands = [
            '–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º? ü§ì',
            '–°–¢–ê–†–¢ üöÄ',
            '–ù–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π üëª'
        ]
    base_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    base_markup.add(*(types.KeyboardButton(cmd) for cmd in base_commands))

    recommendation_types = ['–†–µ—Å—Ç–æ—Ä–∞–Ω—ã üç≥', '–ü–∞—Ä–∫–∏ üå≤',
                            '–¢–µ–∞—Ç—Ä—ã üé≠', '–ú—É–∑–µ–∏ üñºÔ∏è',
                            '–í—Å—ë üéà']
    rec_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    rec_markup.add(*(
            types.KeyboardButton(rec_type) for rec_type in recommendation_types
        )
    )

    check_rec_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_var = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã ü§î')
    btn_back = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üõ¨')
    check_rec_markup.add(btn_var, btn_back)

    location_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_address = types.KeyboardButton(text='–£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å üó∫Ô∏è')
    btn_dest = types.KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üåé',
                                    request_location=True)
    location_markup.add(btn_address, btn_dest, btn_back)

    if message.text in start_actions:
        bot.send_message(message.from_user.id,
                         '‚ùì –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                         reply_markup=base_markup)

    elif message.text == '–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º? ü§ì':
        how_to_msg = r'–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /add\_geo, ' \
            r'—á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ'
        bot.send_message(message.from_user.id,
                         how_to_msg,
                         parse_mode='MarkdownV2')

    elif message.text == '–°–¢–ê–†–¢ üöÄ':
        bot.send_message(message.from_user.id,
                         '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–¥–∞–π –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                         reply_markup=location_markup)

    # FIXME replace '–î–∞' by another logic
    elif message.text in ['–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üåé', '–î–∞ ‚úîÔ∏è']:
        bot.send_message(message.from_user.id,
                         '–í—ã–±–µ—Ä–∏, –∫–∞–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å',
                         reply_markup=rec_markup,
                         parse_mode='Markdown')

    elif message.text.startswith('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ'):
        print('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ... TODO')

    elif message.text == '–ù–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π üëª':
        mess = '–î–µ—Ç–∞–ª–∏ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ '
        link = '[—Å—Å—ã–ª–∫–µ](https://github.com/hgfs113/local-recommendation-bot)'
        bot.send_message(message.from_user.id,
                         mess + link,
                         parse_mode='Markdown')

    elif message.text == '–£–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å üó∫Ô∏è':
        mess = '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ x.x, x.x (–¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)'
        ' –∏–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–æ—Ä–æ–¥, –£–ª–∏—Ü–∞, –ù–æ–º–µ—Ä –¥–æ–º–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)'
        bot.send_message(message.from_user.id,
                         mess,
                         parse_mode='Markdown')

    elif message.text in recommendation_types:
        USER_DICT[message.from_user.id] = message.text
        bot.send_message(message.from_user.id,
                         '–í—ã –≤—ã–±—Ä–∞–ª–∏ ' + message.text.lower(),
                         reply_markup=check_rec_markup,
                         parse_mode='Markdown')

    elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã ü§î':
        if 'lon' not in USER_DICT or 'lat' not in USER_DICT:
            bot.send_message(message.from_user.id,
                             '–Ø –Ω–µ –∑–Ω–∞—é, –≥–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è',
                             parse_mode='Markdown')
        else:
            recommended_items = food_recomender.recommend(
                USER_DICT,
                recommend_limit=20,
                blender_limit=5)
            write_recommendations(recommended_items, message)

    else:
        try:
            address = message.text.split(',')
            address = list(map(lambda x: x.strip(), address))
            if len(address) == 2:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                btn1 = types.KeyboardButton(text='–î–∞')
                btn2 = types.KeyboardButton(text='–ù–µ—Ç')
                markup.add(btn1, btn2)

                flag, mess = utils.get_address_from_coords(address)
                print('else:', flag, mess)

                if flag:
                    bot.send_message(message.from_user.id,
                                     '–¢–≤–æ–π –∞–¥—Ä–µ—Å:' + mess + '?',
                                     reply_markup=markup)
                else:
                    bot.send_message(message.from_user.id,
                                     mess,
                                     reply_markup=markup)
        except Exception:
            bot.send_message(message.from_user.id,
                             '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ—é –∫–æ–º–∞–Ω–¥—É :(',
                             parse_mode='Markdown')


def write_recommendations(recommended_items, message):
    for i, place in enumerate(recommended_items):
        d = utils.dist_to_str(place.dist)
        bot.send_message(message.from_user.id,
                         f'#{i+1}: **{place.name}**\n'
                         f'- –∞–¥—Ä–µ—Å: {place.address}\n'
                         f'- —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –í–∞—Å: {d}\n'
                         f'- —Ä–µ–π—Ç–∏–Ω–≥: {place.get_rating() or "–ù–µ —É–∫–∞–∑–∞–Ω"}',
                         parse_mode='Markdown', reply_markup=gen_markup())
    bot.send_message(message.from_user.id,
                     '–ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã? üòé',
                     parse_mode='Markdown')


if __name__ == "__main__":
    bot.polling(none_stop=True, interval=0)
